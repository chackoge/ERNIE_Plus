\set ON_ERROR_STOP on
\set ECHO all

\if :{?schema}
SET search_path = :schema;
\endif

/* Required:
tablespace          used_space
open_citations_tbs  245 GB
index_tbs           223 GB
*/

-- region open_citation_pubs
CREATE TABLE IF NOT EXISTS open_citation_pubs (
  omid VARCHAR(20) NOT NULL,
  iid INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 0),
  title VARCHAR(150000),
  authors VARCHAR(800000),
  issue VARCHAR(50),
  volume VARCHAR(50),
  venue VARCHAR(8000),
  pages VARCHAR(80),
  pub_year SMALLINT,
  pub_month SMALLINT,
  pub_date DATE,
  type VARCHAR(100), -- TBD replace by ENUM
  publisher VARCHAR(400),
  editors VARCHAR(2000),
  CONSTRAINT open_citation_pubs_pk PRIMARY KEY (omid) USING INDEX TABLESPACE index_tbs
) TABLESPACE open_citations_tbs;

COMMENT ON TABLE open_citation_pubs IS 'Open Citations Meta: bibliographic resources';

COMMENT ON COLUMN open_citation_pubs.omid IS 'The OMID of the publication (bibliographic resource, document),' 'for example: "omid:br/06230199640"';
COMMENT ON COLUMN open_citation_pubs.uri IS --
  'The publication URI: OpenCitations, DOI, PMID or another, for example: "doi:10.1002/cctc.201200008"';
COMMENT ON COLUMN open_citation_pubs.iid IS 'Zero-based index: 0..2,147,483,647';
COMMENT ON COLUMN open_citation_pubs.title IS 'The publication''s title';
--@formatter:off
COMMENT ON COLUMN open_citation_pubs.authors IS
  'The authors, "; "-separated. Each is "{Last, First Middle} [{URI} ...]" or "{URI}", for example: '
    '"Pelletier, Mariane [omid:ra/0648019318]" or "https://w3id.org/oc/meta/ar/06480809000"';
--@formatter:on
COMMENT ON COLUMN open_citation_pubs.issue IS 'The issue to which the document belongs, for example, "1-2"';
COMMENT ON COLUMN open_citation_pubs.volume IS 'The volume to which the document belongs, for example: "151-152"';
--@formatter:off
COMMENT ON COLUMN open_citation_pubs.venue IS
  'Тhe bibliographical resource to which the document belongs: "{Name} [{URI} ...]" or "{URI}", for example: '
    '"https://w3id.org/oc/meta/br/06480193512"';
--@formatter:on
COMMENT ON COLUMN open_citation_pubs.pages IS 'The page range';
COMMENT ON COLUMN open_citation_pubs.pub_year IS 'The publication year';
COMMENT ON COLUMN open_citation_pubs.pub_month IS 'The publication month';
COMMENT ON COLUMN open_citation_pubs.pub_date IS --
  'The publication date. Sometimes only a year or a year and month are available, not the full date.';
COMMENT ON COLUMN open_citation_pubs.type IS --
  'The publication type: one of "book", "book chapter", "journal article", "proceedings", "proceedings article"';
--@formatter:off
COMMENT ON COLUMN open_citation_pubs.publisher IS
  'The entity responsible for making the document available: "{Name} [{URI} ...]" or "{URI}", for exаmple, '
    'Elsevier Bv [omid:ra/0610116009 crossref:78]';
COMMENT ON COLUMN open_citation_pubs.editors IS
  'The editors of the document, "; "-separated. Each is "{Name} [{URIs}] or just {URI}", for example: '
    '"U.S. Geological Survey North Carolina Cooperative Fish And Wildlife Research Unit North Carolina State University '
    'Campus Box 7617 Raleigh North Carolina 27695 Usa [omid:ra/06905728861]"';
--@formatter:on

CREATE UNIQUE INDEX IF NOT EXISTS open_citation_pubs_iid_uk ON open_citation_pubs (iid) --
  TABLESPACE index_tbs;

ALTER TABLE open_citation_pubs
  OWNER TO devs;
-- endregion

-- region stg_open_citation_pubs
DROP VIEW IF EXISTS stg_open_citation_pubs;
CREATE VIEW stg_open_citation_pubs AS
SELECT 'foo' AS id, title, authors AS author, 'bar' AS issue, volume, venue AS venue, pages AS page, 'qux' AS pub_date,
  type, publisher, editors AS editor
FROM open_citation_pubs;

COMMENT ON VIEW stg_open_citation_pubs IS --
  'Staging for OpenCitations Meta ETL. Columns must match the CSV header exactly.';

ALTER VIEW stg_open_citation_pubs OWNER TO devs;
-- endregion

\include_relative generic_functions.sql

\include_relative trg_load_open_citation_pub.sql

-- region open_citation_pub_ids
CREATE TABLE IF NOT EXISTS open_citation_pub_ids (
  omid VARCHAR(20) NOT NULL,
  id VARCHAR(200) NOT NULL,
  CONSTRAINT open_citation_pub_ids_pk PRIMARY KEY (omid, id) USING INDEX TABLESPACE index_tbs
) TABLESPACE open_citations_tbs;

COMMENT ON TABLE open_citation_pub_ids IS 'Open Citations Meta BR OMID map';

--@formatter:off
COMMENT ON COLUMN open_citation_pub_ids.omid IS 'The OMID of the publication (bibliographic resource, document),'
  'for example: "omid:br/06230199640"';
--@formatter:on

--@formatter:off
COMMENT ON COLUMN open_citation_pub_ids.id IS 'Another pub ID: `arxiv:`, `doi:`, `isbn:`, `issn:`, `jid:`, `pmci:`, '
  '`pmid:`, etc., for example: "doi:10.1002/cctc.201200008"';
--@formatter:on

ALTER TABLE open_citation_pub_ids
  OWNER TO devs;
-- endregion

-- region stg_open_citation_pubs
-- DROP VIEW IF EXISTS stg_open_citation_pub_ids;
CREATE OR REPLACE VIEW stg_open_citation_pub_ids AS
SELECT omid, cast(id AS VARCHAR(500))
FROM open_citation_pub_ids ocpi;

COMMENT ON VIEW stg_open_citation_pub_ids IS 'Staging for OpenCitations Meta BR OMID map ETL.';

ALTER VIEW stg_open_citation_pub_ids OWNER TO devs;
-- endregion

\include_relative trg_load_open_citation_pub_ids.sql

CREATE TABLE IF NOT EXISTS open_citations (
  oci VARCHAR(1000),
  citing VARCHAR(20) NOT NULL,
  cited VARCHAR(20) NOT NULL,
  citing_pub_year SMALLINT,
  citing_pub_month SMALLINT,
  citing_pub_date DATE,
  time_span INTERVAL,
  journal_sc BOOLEAN,
  author_sc BOOLEAN,
  CONSTRAINT open_citations_pk PRIMARY KEY (oci) USING INDEX TABLESPACE index_tbs
  -- TBD Partitioning seems like the Right Thing here, but it slowed down ETL by multiple orders of magnitude
  --CONSTRAINT open_citations_pk PRIMARY KEY (citing_pub_year, oci) USING INDEX TABLESPACE index_tbs
) /*PARTITION BY RANGE (citing_pub_year)*/ TABLESPACE open_citations_tbs;

-- FK is not valid as of :
--DETAIL:  Key (citing)=(omid:br/06390339018) is not present in table "open_citation_pubs".
/*
ALTER TABLE open_citations
  ADD CONSTRAINT open_citations_citing_fk FOREIGN KEY (citing) REFERENCES open_citation_pubs --
    ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;
*/

/*
-- Partitions
DO
$block$
  DECLARE
    year SMALLINT;
    century SMALLINT;
    sql TEXT;
  BEGIN
    FOR year IN 1900..extract(YEAR FROM current_date)
      LOOP
        sql := format('CREATE TABLE open_citations_%s PARTITION OF open_citations
                      FOR VALUES FROM (%1$s) TO (%1$s + 1)
                      TABLESPACE open_citations_tbs', year);
        RAISE NOTICE USING MESSAGE = sql || ';';
        EXECUTE sql;
      END LOOP;

    -- Citations start from publication year 1500
    FOR century IN 16..19
      LOOP
        sql := format('CREATE TABLE open_citations_%s_%s PARTITION OF open_citations
                      FOR VALUES FROM (%1$s) TO (%2$s + 1)
                      TABLESPACE open_citations_tbs', (century - 1) * 100, (century - 1) * 100 + 99);
        RAISE NOTICE USING MESSAGE = sql || ';';
        EXECUTE sql;
      END LOOP;
  END;
$block$;
*/

CREATE UNIQUE INDEX IF NOT EXISTS open_citations_uk ON open_citations (citing, cited) --
  TABLESPACE index_tbs;

CREATE INDEX IF NOT EXISTS oc_cited_i ON open_citations (cited) TABLESPACE index_tbs;

COMMENT ON TABLE open_citations IS 'OpenCitations Index: Crossref open citations excluding citation anomalies';

COMMENT ON COLUMN open_citations.citing IS 'OMID of the citing publication';
COMMENT ON COLUMN open_citations.cited IS 'OMID of the citing publication';
COMMENT ON COLUMN open_citations.citing_pub_year IS 'The publication year of the citing bibliographic resource';
COMMENT ON COLUMN open_citations.citing_pub_month IS 'The publication month of the citing bibliographic resource';
--@formatter:off
COMMENT ON COLUMN open_citations.citing_pub_date IS --
  'The publication date of the citing bibliographic resource. Sometimes only a year or a year and month are available, '
  'not the full date.';
--@formatter:on
COMMENT ON COLUMN open_citations.time_span IS --
  'The interval between the publications of the citing entity and the cited entity.';
COMMENT ON COLUMN open_citations.journal_sc IS --
  'Whether it is a journal self-citation (i.e. the citing and the cited entities are published in the same journal)';
COMMENT ON COLUMN open_citations.author_sc IS --
  'Whether it is an author self-citation (i.e. the citing and the cited entities have at least one author in common).';

ALTER TABLE open_citations
  OWNER TO devs;

CREATE TABLE open_citations_duplicate (
  oci VARCHAR(1000),
  citing VARCHAR(20) NOT NULL,
  cited VARCHAR(20) NOT NULL,
  citing_pub_year SMALLINT,
  citing_pub_month SMALLINT,
  citing_pub_date DATE,
  time_span INTERVAL,
  journal_sc BOOLEAN,
  author_sc BOOLEAN
) TABLESPACE open_citations_tbs;

CREATE UNIQUE INDEX IF NOT EXISTS open_citations_duplicate_uk --
  ON open_citations_duplicate (oci, citing, cited,
                               citing_pub_year,
                               citing_pub_month,
                               citing_pub_date, time_span,
                               journal_sc,
                               author_sc) TABLESPACE index_tbs;

COMMENT ON TABLE open_citations_duplicate IS --
  'Citations with a duplicate OCI to `open_citations` but different data in an other column';

ALTER TABLE open_citations_duplicate
  OWNER TO devs;

CREATE TABLE open_citations_parallel (
  oci VARCHAR(1000),
  citing VARCHAR(20) NOT NULL,
  cited VARCHAR(20) NOT NULL,
  citing_pub_year SMALLINT,
  citing_pub_month SMALLINT,
  citing_pub_date DATE,
  time_span INTERVAL,
  journal_sc BOOLEAN,
  author_sc BOOLEAN,
  CONSTRAINT open_citations_parallel_pk PRIMARY KEY (oci) USING INDEX TABLESPACE index_tbs
) TABLESPACE open_citations_tbs;

COMMENT ON TABLE open_citations_parallel IS 'Citations that parallel (citing -> cited) in `open_citations`';

ALTER TABLE open_citations_parallel
  OWNER TO devs;

CREATE TABLE open_citations_self (
  oci VARCHAR(1000),
  citing VARCHAR(20) NOT NULL,
  cited VARCHAR(20) NOT NULL,
  citing_pub_year SMALLINT,
  citing_pub_month SMALLINT,
  citing_pub_date DATE,
  time_span INTERVAL,
  journal_sc BOOLEAN,
  author_sc BOOLEAN,
  CONSTRAINT open_citations_self_pk PRIMARY KEY (oci) USING INDEX TABLESPACE index_tbs
) TABLESPACE open_citations_tbs;

COMMENT ON TABLE open_citations_self IS 'Citations with citing = cited';

ALTER TABLE open_citations_self
  OWNER TO devs;

CREATE TABLE open_citations_looping (
  oci VARCHAR(1000),
  citing VARCHAR(20) NOT NULL,
  cited VARCHAR(20) NOT NULL,
  citing_pub_year SMALLINT,
  citing_pub_month SMALLINT,
  citing_pub_date DATE,
  time_span INTERVAL,
  journal_sc BOOLEAN,
  author_sc BOOLEAN,
  CONSTRAINT open_citations_looping_pk PRIMARY KEY (oci) USING INDEX TABLESPACE index_tbs
) TABLESPACE open_citations_tbs;

COMMENT ON TABLE open_citations_looping IS 'Citations that loop back (cited -> citing) comparing with `open_citations`';

ALTER TABLE open_citations_looping
  OWNER TO devs;

CREATE TABLE open_citations_no_valid_dating (
  oci VARCHAR(1000),
  citing VARCHAR(20) NOT NULL,
  cited VARCHAR(20) NOT NULL,
  citing_pub_year SMALLINT,
  citing_pub_month SMALLINT,
  citing_pub_date DATE,
  time_span INTERVAL,
  journal_sc BOOLEAN,
  author_sc BOOLEAN,
  CONSTRAINT open_citations_no_valid_dating_pk PRIMARY KEY (oci) USING INDEX TABLESPACE index_tbs
) TABLESPACE open_citations_tbs;

COMMENT ON TABLE open_citations_no_valid_dating IS --
  'Citations where the citing publication has either unknown (blank) date or the future year';

ALTER TABLE open_citations_no_valid_dating
  OWNER TO devs;

CREATE OR REPLACE VIEW stg_open_citations AS
SELECT oci, citing, cited, 'foo' AS creation, 'bar' AS timespan, journal_sc, author_sc
FROM open_citations;

COMMENT ON VIEW stg_open_citations IS 'Staging for OpenCitations Index ETL. Columns must match the CSV header exactly.';

ALTER VIEW stg_open_citations OWNER TO devs;

\include_relative trg_load_open_citation.sql

CREATE OR REPLACE VIEW open_citations_between_known_pubs AS
SELECT ocp_citing.iid AS citing_iid, ocp_cited.iid AS cited_iid
FROM open_citations oc
  JOIN open_citation_pubs ocp_citing ON ocp_citing.omid = oc.citing
  JOIN open_citation_pubs ocp_cited ON ocp_cited.omid = oc.cited;

COMMENT ON VIEW open_citations_between_known_pubs IS 'Citations between valid, existing pubs only.';

GRANT SELECT ON ALL TABLES IN SCHEMA public TO PUBLIC;
GRANT SELECT ON ALL SEQUENCES IN SCHEMA public TO PUBLIC;
GRANT pg_read_server_files TO devs;

GRANT ALL ON ALL TABLES IN SCHEMA public TO jenkins;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO jenkins;
GRANT ALL ON ALL ROUTINES IN SCHEMA public TO jenkins;
GRANT CREATE ON SCHEMA public TO jenkins;